name: Release Creation

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Load the system.json manifest into memory
    - name: Load system manifest
      id: manifest
      uses: zoexx/github-action-json-file-properties@release
      with:
        file_path: './system.json'
  
    # Compare the version in the system.json with the latest release tag
    - name: Compare version
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestRelease = const await github.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          return latestRelease;
    
    - name: Print Latest Release Details
      run: |
        echo "Latest release tag: ${{ steps.get_release.outputs.tag_name }}"
          echo "Latest release name: ${{ steps.get_release.outputs.name }}"
          echo "Latest release body: ${{ steps.get_release.outputs.body }}"
      
    # Check if the version in the system.json is the same as the latest release tag
    - name: Check if version is the same
      run: |
        if [ "${{ steps.manifest.outputs.version }}" == "${{ steps.get_release.outputs.tag_name }}" ]; then
          echo "Version is the same as the latest release tag"
          exit 1
        else
          echo "Version is different from the latest release tag"
        fi
          
    # Update the download link in the system.json with the new version
    - name: Update download link
      run: |
        jq --arg version "${{ steps.manifest.outputs.version }}" '.download = "https://github.com/BryanFRD/Mouny/releases/download/" + $version +"/Mouny-" + $version + ".zip"' system.json > system.json.tmp
        mv system.json.tmp system.json
        
    # Create a new release with the version from the system.json
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.manifest.outputs.version }}
        release_name: Release ${{ steps.manifest.outputs.version }}
        body: |
          Release ${{ steps.manifest.outputs.version }}
        draft: false
        prerelease: false
    
    # Upload the release asset
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Mouny-${{ steps.manifest.outputs.version }}.zip
        asset_name: Mouny-${{ steps.manifest.outputs.version }}.zip
        asset_content_type: application/zip